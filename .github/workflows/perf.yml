name: Perf

on:
  workflow_dispatch:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
  # Cancel any workflow currently in progress for the same PR.
  # Allow running concurrently with any other commits.
  group: perf-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: read-all

jobs:
  run:
    name: Run Perf
    runs-on: ubuntu-20.04
    steps:
    - name: Trigger NetPerf Workflow
      uses: peter-evans/repository-dispatch@bf47d102fdb849e755b0b0023ea3e81a44b6f570
      with:
        token: ${{ secrets.NET_PERF_TRIGGER }}
        repository: microsoft/netperf
        event-type: run-quic
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "name": "msquic"}'
    - name: Wait for NetPerf Workflow
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        function Get-WorkflowRunId {
          gh run list -R microsoft/netperf -e repository_dispatch `
            | Select-String -Pattern 'repository_dispatch\s+(\d+)' -AllMatches `
            | Foreach-Object { $_.Matches } `
            | Foreach-Object { `
                if (gh run view -R microsoft/netperf $_.Groups[1].Value | `
                    Select-String -Pattern "msquic-${{ github.sha }}") {
                    return $_.Groups[1].Value `
                } } `
          return $null
        }
        function Get-WorkflowStatus {
          param([string]$id)
          $output = gh run view -R microsoft/netperf $id --exit-status
          if ($output | Select-String -Pattern "X Complete") {
            return "failure"
          }
          if ($output | Select-String -Pattern "Γ£ô Complete") {
            return "success"
          }
          return $null
        }
        # Get the workflow run id, trying up to 3 times
        $id = $null
        $i = 0
        while ($i -lt 3 -and $id -eq $null) {
          $id = Get-WorkflowRunId
          if ($id -eq $null) {
            Write-Host "Waiting for NetPerf workflow to start..."
            Start-Sleep -Seconds 1
          }
          $i++
        }
        # Wait for the workflow to complete
        $i = 0
        $status = $null
        while ($i -lt 30 -and $status -eq $null) {
          $status = Get-WorkflowStatus $id
          if ($status -eq $null) {
            Start-Sleep -Seconds 30
          }
          $i++
        }
        Write-Host "NetPerf workflow completed with status: $status"
